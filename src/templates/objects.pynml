<tal:industries repeat="industry registered_industries">
    <!--! grf_object not object in case it conflicts with python 'object' at any point (might not, but who wants to test that? -->
    <tal:objects repeat="grf_object industry.objects.values()">
        // CABBAGE view ${grf_object.views}
        <tal:view repeat="view grf_object.views">
            // CABBAGE views ${view}
            <tal:spritelayouts repeat="x_y_spritelayout view">
                // CABBAGE x_y_spritelayout ${x_y_spritelayout}
                // for debug: object layout derived from industry layout name ${x_y_spritelayout[2].id}
                spritelayout ${grf_object.id}_view_${repeat.view.index}_spritelayout_${repeat.x_y_spritelayout.index} {
                    childsprite {
                        sprite: ${industry.unpack_sprite_or_spriteset(x_y_spritelayout[2].ground_sprite)};
                        always_draw: 1;
                    }
                    /* snow nerfed
                    childsprite {
                        sprite: ${industry.unpack_sprite_or_spriteset(x_y_spritelayout[2].ground_sprite, snow_overlay=True)};
                        //hide_sprite: (!LOAD_TEMP(13));
                        always_draw: 1;
                    }
                     */
                    <tal:build_building_sprites repeat="building_sprite x_y_spritelayout[2].building_sprites">
                        building {
                            sprite: ${industry.unpack_sprite_or_spriteset(building_sprite, construction_state_num=3)};
                            recolour_mode: RECOLOUR_REMAP;
                            palette: PALETTE_USE_DEFAULT;
                            xoffset: ${building_sprite.xoffset};
                            yoffset: ${building_sprite.yoffset};
                            zoffset: ${building_sprite.zoffset};
                            xextent: ${building_sprite.xextent};
                            yextent: ${building_sprite.yextent};
                            zextent: ${building_sprite.zextent};
                            always_draw: ${building_sprite.always_draw};
                        }
                        /* snow nerfed
                        building {
                            sprite: ${industry.unpack_sprite_or_spriteset(building_sprite, construction_state_num=3, snow_overlay=True)};
                            recolour_mode: RECOLOUR_REMAP;
                            palette: PALETTE_USE_DEFAULT;
                            xoffset: ${building_sprite.xoffset};
                            yoffset: ${building_sprite.yoffset};
                            zoffset: ${building_sprite.zoffset};
                            xextent: ${building_sprite.xextent};
                            yextent: ${building_sprite.yextent};
                            zextent: ${building_sprite.zextent};
                            always_draw: ${building_sprite.always_draw};
                        }
                        */
                    </tal:build_building_sprites>
                    }
                </tal:spritelayouts>

                switch(FEAT_OBJECTS, SELF, ${grf_object.id}_view_${repeat.view.index}_switch_graphics_layout, relative_pos) {
                    <tal:spritelayouts repeat="x_y_spritelayout view">
                        relative_coord(${x_y_spritelayout[0]}, ${x_y_spritelayout[1]}): ${grf_object.id}_view_${repeat.view.index}_spritelayout_${repeat.x_y_spritelayout.index};
                    </tal:spritelayouts>
                }
            </tal:view>

            switch(FEAT_OBJECTS, SELF, ${grf_object.id}_switch_graphics, view) {
                <tal:views repeat="view_num range(len(grf_object.views))">
                    ${view_num}: ${grf_object.id}_view_${view_num}_switch_graphics_layout;
                </tal:views>
            }

            <tal:economies repeat="economy industry.economies_enabled_for_industry">
                if (economy==${economy.numeric_id} && objects) {
                    item(FEAT_OBJECTS, ${grf_object.id}, ${object_ids[grf_object.id]}) {
                        property {
                            <!--! class is: industry ID, padded out with 0s and F pre-pended, e.g. F001 etc
                                  it's accepted that this might collide with other sets but eh
                            -->
                            class                   :"${'F' + str(industry.numeric_id).zfill(3)}";
                            classname:              ${industry.get_property('name', None)};
                            climates_available:     ALL_CLIMATES;
                            size:                   ${grf_object.size};
                            build_cost_multiplier:  0;
                            remove_cost_multiplier: 0;
                            introduction_date:      date(1, 1, 1);
                            end_of_life_date:       date(${global_constants.max_game_date}, 1, 1);
                            /* Anything can overbuild the object, removing returns the money, we don't want foundations and we want to allow bridges */
                            object_flags:           bitmask(OBJ_FLAG_ANYTHING_REMOVE);
                            height:                 6;
                            num_views:              ${len(grf_object.views)};
                            // name derived from industry currently
                            ${industry.get_property_declaration('name', None)}
                        }
                        graphics {
                            colour:                 switch_colour_object(${industry.numeric_id});
                            purchase:               ${grf_object.id}_switch_graphics;
                            ${grf_object.id}_switch_graphics;
                        }
                    }
                }
            </tal:economies>
    </tal:objects>
</tal:industries>
